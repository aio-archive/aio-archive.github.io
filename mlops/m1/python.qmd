---
title: "Python"
---

# Environment

Nên dùng Anaconda khi dev local (vì sự thuận tiện bởi các package có sẵn), và dùng local environment khi deploy.

Smoke test: test lần đầu tiên về cái mình vừa cài đặt.

Nếu dùng chung môi trường sẽ dễ bị conflict với các project khác (version của thư viện, ...) -> best practice là tạo môi trường ảo riêng.

# Compiled vs. Interpreted language

Compiled language: biên dịch, phải chuyển (build) thành machine code (ngôn ngữ máy có thể hiểu được)
VD: Rust, C++, C, Go, ...


Interpreted language: thực thi từng dòng một.

- A script -> Ready to run

- A script (Python, Ruby) -> Byte code (máy chưa hiểu được luôn) -> Thực thi (Python thuộc định nghĩa này, với byte code được lưu ở `pycache`).

Interpreted language thường chậm hơn compiled language.

```{.python}

import argparse
import numpy

def main(args):
    a = args.a
    b = args.b
    print("Sum of a and b is: ", a + b)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--a", type=int, default=1, required=True)
    parser.add_argument("--b", type=int, default=2, required=True)
    args = parser.parse_args()
    main(args)
```

Run
```bash
python main.py --a 1 --b 2
```

|                      | **Compiled language**      | **Interpreted language**      |
|----------------------|---------------------------|------------------------------|
| **Execution speed**  | Fast                      | Slow                         |
| **Compilation steps**| An extra “build” step     | No                           |
| **Modification complexity** | Rebuild at every change | Don’t need to rebuild    |

**Note:** *The definitions of compiled and interpreted language are varied, but it gives us some ideas why Python is slower than C++.*

# Data structures

```{python}
my_tuple = (1,2,3,1)
print(f"My tuple is: {my_tuple}")
```

::: {.callout-note}
f-string can be bad in terms of security reasons.
:::

Basics of data structures:

- List: mutable, used to add or remove elements

- Tuple: immutable, used to store related data

- Dictionary: mutable, key-value pairs, used to store data that can be looked up by a key

- Set: mutable, unordered, used to store unique elements

Tuple thường vẫn có thể được dùng làm dictionary key. (Bất kì object nào có thể hashable đều có thể làm key). Hash là khả năng tạo ra sự duy nhất.


# Functions and decorators

Decorator là một hàm nhận vào hàm khác, dùng `@` để đặt trước hàm được decorate.

Các ứng dụng của decorator:

- Airflow, kubeflow

- 

```{.python}
# Import the library
import argparse

# Import process_time to calculate the real amount
# of time spent on this process, please take a look
# at the below articles to understand the difference
# between time(), perf_counter(), and process_time()
# https://www.linkedin.com/pulse/timetime-vs-timeperfcounter-python-raghavendraa-battula/
# https://sentry.io/answers/measure-elapsed-time-in-python/
from time import process_time

from loguru import logger

# Reference: https://blog.miguelgrinberg.com/post/the-ultimate-guide-to-python-decorators-part-iii-decorators-with-arguments
# and take a look at this article for decorators with classes https://www.freecodecamp.org/news/python-decorators-explained-with-examples/
def measure_execution_time_with_args(*d_args, **d_kwargs):
    def wrapper(input_func):
        def inner(*args, **kwargs):
            # Calculate the starting time
            start = process_time()
            # Execute the inner function
            print("Debugging measure_execution_time arguments:")
            print("d_args: ", d_args)
            print("d_kwargs: ", d_kwargs)
            result = input_func(*args, **kwargs)
            # Calculate the end time
            end = process_time()
            logger.info(f"Elapsed time: {end - start}")
            return result

        return inner

    return wrapper


def measure_execution_time(input_func):
    def inner(*args, **kwargs):
        # Calculate the starting time
        start = process_time()
        # Execute the inner function
        result = input_func(*args, **kwargs)
        # Calculate the end time
        end = process_time()
        logger.info(f"Elapsed time: {end - start}")
        return result

    return inner

# You can also replace with the decorator with arguments below
# @measure_execution_time_with_args(10, myarg=100, myarg2=200)
@measure_execution_time
def predict(x):
    model = {"a": 1, "b": 2}
    logger.info("Getting predictions!")
    if x in model:
        return model[x]
    else:
        raise ValueError(f"Could not predict {x}")


def main(args):
    x = args.x
    print(predict(x))


# This is only executed when invoking this script
if __name__ == "__main__":
    # Create a parser to receive the command line arguments
    parser = argparse.ArgumentParser()
    # Define all arguments
    parser.add_argument("-x", type=str, required=True)
    # Parse the arguments
    args = parser.parse_args()
    # Run the main function
    main(args)
```

x
